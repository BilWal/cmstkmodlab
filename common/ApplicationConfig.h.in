/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
//               Copyright (C) 2011-2017 - The DESY CMS Group                  //
//                           All rights reserved                               //
//                                                                             //
//      The CMStkModLab source code is licensed under the GNU GPL v3.0.        //
//      You have the right to modify and/or redistribute this source code      //
//      under the terms specified in the license, which may be found online    //
//      at http://www.gnu.org/licenses or at License.txt.                      //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

#ifndef APPLICATIONCONFIG_H
#define APPLICATIONCONFIG_H

#include <string>
#include <sstream>
#include <map>
#include <vector>
#include <iomanip>

#include <QObject>
#include <QVariant>
#include <QMessageBox>

/** @addtogroup common
 *  @{
 */

namespace Config {
  extern const std::string CMSTkModLabBasePath;
}

class ApplicationConfig
{
public:

  static ApplicationConfig* instance(const std::string filename = std::string());

  template <class aType> aType getValue(std::string const& key) const {
    aType returnValue = 0;
    std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.c_str(), std::istringstream::in);
      iss >> returnValue;
    } else {
      issueKeyError(key);
    }
    return returnValue;
  }

  template <class aType> std::vector<aType> getValueVector(std::string const& key) const {
    aType returnValue = 0;
    std::vector<aType> returnVector;
    std::pair<std::multimap<std::string,std::string>::const_iterator,
              std::multimap<std::string,std::string>::const_iterator> ret;
    ret = keyvalueMap_.equal_range(key);
    for (std::multimap<std::string,std::string>::const_iterator it=ret.first; it!=ret.second; ++it) {
      std::istringstream iss(it->second.c_str(), std::istringstream::in);
      iss >> returnValue;
      returnVector.push_back(returnValue);
    }
    return returnVector;
  }

  template <class aType> aType getValue(std::string const& key, aType defaultValue) const {
    aType returnValue = 0;
    std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.c_str(), std::istringstream::in);
      iss >> returnValue;
    } else {
      returnValue = defaultValue;
    }
    return returnValue;
  }

  std::string getValue(std::string const& key) const {
    std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      return it->second;
    } else {
      issueKeyError(key);
    }
    return std::string();
  }

  std::vector<std::string> getValueVector(std::string const& key) const {
    std::vector<std::string> returnVector;
    std::pair<std::multimap<std::string,std::string>::const_iterator,
              std::multimap<std::string,std::string>::const_iterator> ret;
    ret = keyvalueMap_.equal_range(key);
    for (std::multimap<std::string,std::string>::const_iterator it=ret.first; it!=ret.second; ++it) {
      returnVector.push_back(it->second);
    }
    return returnVector;
  }

  std::string getValue(std::string const& key, std::string defaultValue) const {
    std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      return it->second;
    } else {
      return defaultValue;
    }
  }

  template <class aType> void setValue(std::string const& key, aType value) {
    QVariant variant(value);
    keyvalueMap_.erase(key);
    keyvalueMap_.insert(std::make_pair(key, variant.toString().toStdString()));
  }

  void safe(const std::string filename);

protected:

  ApplicationConfig(const std::string filename);
  static ApplicationConfig* instance_;

  void issueKeyError(const std::string&) const;

  std::multimap<std::string,std::string> keyvalueMap_;
};

template <> std::string ApplicationConfig::getValue(std::string const& key) const;
template <> std::vector<std::string> ApplicationConfig::getValueVector(std::string const& key) const;
template <> std::string ApplicationConfig::getValue(std::string const& key, std::string defaultValue) const;

template <> int ApplicationConfig::getValue(std::string const& key) const;
template <> std::vector<int> ApplicationConfig::getValueVector(std::string const& key) const;
template <> int ApplicationConfig::getValue(std::string const& key, int defaultValue) const;

template <> unsigned int ApplicationConfig::getValue(std::string const& key) const;
template <> std::vector<unsigned int> ApplicationConfig::getValueVector(std::string const& key) const;
template <> unsigned int ApplicationConfig::getValue(std::string const& key, unsigned int defaultValue) const;

template <> void ApplicationConfig::setValue(std::string const& key, std::string value);

/** @} */

#endif // APPLICATIONCONFIG_H
